name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Preinstall
      run: sudo apt install -y libzbar-dev libopencv-dev qtbase5-dev

    - name: Submodules update
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_WITH_OpenCV=ON -DBUILD_WITH_ZBar=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Upload ASCIIDataDecoder
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu-ASCIIDataDecoder
          path: ${{github.workspace}}/build/ASCIIDataDecoder

    - name: Upload ASCIIDataEncoder
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu-ASCIIDataEncoder
          path: ${{github.workspace}}/build/ASCIIDataEncoder

    - name: Upload BinnaryFileToQrCodeGUI
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu-BinnaryFileToQrCodeGUI
          path: ${{github.workspace}}/build/QtApp/BinnaryFileToQrCodeGUI
       
  build-ubuntu18_04:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v3

    - name: Preinstall
      run: sudo apt install -y libzbar-dev libopencv-dev qtbase5-dev

    - name: Submodules update
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_WITH_OpenCV=ON -DBUILD_WITH_ZBar=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Upload ASCIIDataDecoder
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu18_04-ASCIIDataDecoder
          path: ${{github.workspace}}/build/ASCIIDataDecoder

    - name: Upload ASCIIDataEncoder
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu18_04-ASCIIDataEncoder
          path: ${{github.workspace}}/build/ASCIIDataEncoder

    - name: Upload BinnaryFileToQrCodeGUI
      uses: actions/upload-artifact@v3
      with:
          name: Ubuntu18_04-BinnaryFileToQrCodeGUI
          path: ${{github.workspace}}/build/QtApp/BinnaryFileToQrCodeGUI
